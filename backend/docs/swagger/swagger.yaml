basePath: '{{.BasePath}}'
definitions:
  api.deleteARoomRequest:
    properties:
      id:
        type: integer
    type: object
  api.deleteATimeslotRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  api.getASpeakerRequest:
    properties:
      id:
        type: integer
    type: object
  api.getATimeslotRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  api.roomRequest:
    properties:
      id:
        type: integer
    type: object
  api.updateARoomRequest:
    properties:
      capacity:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  api.updateATimeslotRequest:
    properties:
      endTime:
        example: "2019-10-01 23:00:00"
        type: string
      id:
        example: 1
        type: integer
      startTime:
        example: "2019-02-18 21:00:00"
        type: string
    type: object
  api.writeARoomRequest:
    properties:
      capacity:
        type: integer
      name:
        type: string
    type: object
  api.writeATimeslotRequest:
    properties:
      endTime:
        example: "2019-10-01 23:00:00"
        type: string
      startTime:
        example: "2019-02-18 21:00:00"
        type: string
    type: object
  db.Room:
    properties:
      capacity:
        example: 50
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: My Room Name
        type: string
    type: object
  db.Session:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Session Name
        type: string
      room:
        $ref: '#/definitions/db.Room'
        type: object
      speaker:
        $ref: '#/definitions/db.Speaker'
        type: object
      timeslot:
        $ref: '#/definitions/db.Timeslot'
        type: object
    type: object
  db.Speaker:
    properties:
      email:
        example: firstname.lastname@gmail.com
        type: string
      firstName:
        example: Bob
        type: string
      id:
        type: integer
      lastName:
        example: Smith
        type: string
    type: object
  db.Timeslot:
    properties:
      endTime:
        example: "2019-10-01 23:00:00"
        type: string
      id:
        example: 1
        type: integer
      startTime:
        example: "2019-02-18 21:00:00"
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: The API for the code camp counting program.
  license: {}
  title: Code Camp Counter API
  version: "1.0"
paths:
  /api/v1/room:
    delete:
      consumes:
      - application/json
      description: Delete a room from the db
      parameters:
      - description: Room to delete
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/api.deleteARoomRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Delete a room from the db
    get:
      description: Returns a room
      parameters:
      - description: ID of the requested Room
        in: body
        name: roomID
        required: true
        schema:
          $ref: '#/definitions/api.roomRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get a room
    post:
      consumes:
      - application/json
      description: Write a room to the db
      parameters:
      - description: Room to write
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/api.writeARoomRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Write a room to the db
    put:
      consumes:
      - application/json
      description: Update a room in the db
      parameters:
      - description: Room to update
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/api.updateARoomRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: boolean
      summary: Update a room in the db
  /api/v1/rooms:
    get:
      description: Return a list of all rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Room'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all rooms
  /api/v1/session:
    get:
      description: Return a list of all sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Session'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all sessions
  /api/v1/speaker:
    get:
      description: Return a speaker with the specified email
      parameters:
      - description: ID of the requested speaker
        in: body
        name: speakerID
        required: true
        schema:
          $ref: '#/definitions/api.getASpeakerRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Speaker'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get a speaker by email
  /api/v1/speakers:
    get:
      description: Return a list of all speakers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Speaker'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all speakers
  /api/v1/timeslot:
    delete:
      consumes:
      - application/json
      description: Delete an existing timeslot in the db
      parameters:
      - description: the timeslot to delete
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.deleteATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Deleted properly
        "400":
          description: the request was bad
          schema:
            type: string
        "503":
          description: failed to access the db
          schema:
            type: string
      summary: Delete an existing timeslot in the db
    get:
      consumes:
      - application/json
      description: Get a timeslot from the db
      parameters:
      - description: the timeslot to retrieve
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.getATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: the requested timeslot
          schema:
            $ref: '#/definitions/db.Timeslot'
            type: object
        "400":
          description: the request was bad
          schema:
            type: string
        "503":
          description: failed to access the db
          schema:
            type: string
      summary: Get a timeslot from the db
    post:
      consumes:
      - application/json
      description: Add a timeslot to the db
      parameters:
      - description: the timeslot to add
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.writeATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: the id of the timeslot added
          schema:
            type: integer
        "400":
          description: the request was bad
          schema:
            type: string
        "503":
          description: failed to access the db
          schema:
            type: string
      summary: Add a timeslot
    put:
      consumes:
      - application/json
      description: Update an existing timeslot in the db
      parameters:
      - description: the timeslot to update with the new values
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.updateATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated properly
        "400":
          description: the request was bad
          schema:
            type: string
        "503":
          description: failed to access the db
          schema:
            type: string
      summary: Update an existing timeslot in the db
  /api/v1/timeslots:
    get:
      description: Get all timeslots from the db
      produces:
      - application/json
      responses:
        "200":
          description: all timeslots in the db
          schema:
            items:
              $ref: '#/definitions/db.Timeslot'
            type: array
        "400":
          description: the request was bad
          schema:
            type: string
        "503":
          description: failed to access the db
          schema:
            type: string
      summary: Get all timeslots from the db
swagger: "2.0"
