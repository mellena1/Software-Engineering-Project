basePath: '{{.BasePath}}'
definitions:
  api.deleteATimeslotRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  api.updateATimeslotRequest:
    properties:
      endTime:
        example: "2019-10-01 23:00:00"
        type: string
      id:
        example: 1
        type: integer
      startTime:
        example: "2019-02-18 21:00:00"
        type: string
    type: object
  api.writeATimeslotRequest:
    properties:
      endTime:
        example: "2019-10-01 23:00:00"
        type: string
      startTime:
        example: "2019-02-18 21:00:00"
        type: string
    type: object
  db.Room:
    properties:
      capacity:
        type: integer
      roomName:
        type: string
    type: object
  db.Session:
    properties:
      id:
        type: integer
      name:
        type: string
      room:
        $ref: '#/definitions/db.Room'
        type: object
      speaker:
        $ref: '#/definitions/db.Speaker'
        type: object
      timeslot:
        $ref: '#/definitions/db.Timeslot'
        type: object
    type: object
  db.Speaker:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  db.Timeslot:
    properties:
      endTime:
        type: string
      id:
        type: integer
      startTime:
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: The API for the code camp counting program.
  license: {}
  title: Code Camp Counter API
  version: "1.0"
paths:
  /api/v1/room:
    get:
      description: Return a list of all rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Room'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all rooms
  /api/v1/session:
    get:
      description: Return a list of all sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Session'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all sessions
  /api/v1/speaker:
    get:
      description: Return a list of all speakers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Speaker'
            type: array
        "400":
          description: Bad Request
          schema:
            type: ""
      summary: Get all speakers
  /api/v1/timeslot:
    delete:
      consumes:
      - application/json
      description: Delete an existing timeslot in the db
      parameters:
      - description: the timeslot to delete
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.deleteATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Deleted properly
        "400":
          description: the request was bad
          schema:
            type: ""
        "503":
          description: failed to access the db
          schema:
            type: ""
      summary: Delete an existing timeslot in the db
    post:
      consumes:
      - application/json
      description: Add a timeslot to the db
      parameters:
      - description: the timeslot to add
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.writeATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: the id of the timeslot added
          schema:
            type: ""
        "400":
          description: the request was bad
          schema:
            type: ""
        "503":
          description: failed to access the db
          schema:
            type: ""
      summary: Add a timeslot
    put:
      consumes:
      - application/json
      description: Update an existing timeslot in the db
      parameters:
      - description: the timeslot to update with the new values
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/api.updateATimeslotRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated properly
        "400":
          description: the request was bad
          schema:
            type: ""
        "503":
          description: failed to access the db
          schema:
            type: ""
      summary: Update an existing timeslot in the db
swagger: "2.0"
